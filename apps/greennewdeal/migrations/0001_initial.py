# Generated by Django 2.2.10 on 2020-03-07 10:10

import apps.greennewdeal.models.mixins
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_alpha2', models.CharField(max_length=2, verbose_name='Code ISO 3166-1 alpha2')),
                ('code_alpha3', models.CharField(max_length=3, verbose_name='Code ISO 3166-1 alpha3')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, verbose_name='Slug')),
                ('point_lat', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Latitude of central point')),
                ('point_lon', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Longitude of central point')),
                ('point_lat_min', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Latitude of southernmost point')),
                ('point_lon_min', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Longitude of westernmost point')),
                ('point_lat_max', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Latitude of northernmost point')),
                ('point_lon_max', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Longitude of easternmost point')),
                ('democracy_index', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, verbose_name='Democracy index')),
                ('corruption_perception_index', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, verbose_name='Corruption perception index')),
                ('high_income', models.BooleanField(default=False, verbose_name='High income')),
                ('is_target_country', models.BooleanField(default=False, verbose_name='Is target country')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(null=True, srid=4326)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=3, verbose_name='Code')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('symbol', models.CharField(max_length=255, verbose_name='Symbol')),
                ('country', models.CharField(max_length=2, verbose_name='Country')),
                ('ranking', models.IntegerField(verbose_name='Ranking')),
            ],
        ),
        migrations.CreateModel(
            name='Deal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intended_size', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Intended size')),
                ('contract_size', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Size under contract (leased or purchased area, in ha)')),
                ('production_size', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Size in operation (production, in ha)')),
                ('land_area_comment', models.TextField(blank=True)),
                ('intention_of_investment', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Intention of the investment')),
                ('intention_of_investment_comment', models.TextField(blank=True)),
                ('nature_of_deal', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(10, 'Outright Purchase'), (20, 'Lease'), (30, 'Concession'), (40, 'Exploitation permit / license / concession (for mineral resources)'), (50, 'Pure contract farming')], verbose_name='Nature of the deal'), blank=True, null=True, size=None)),
                ('nature_of_deal_comment', models.TextField(blank=True, verbose_name='Comment on nature of the deal')),
                ('negotiation_status', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Negotiation status')),
                ('negotiation_status_comment', models.TextField(blank=True, verbose_name='Comment on negotiation status')),
                ('implementation_status', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Implementation status')),
                ('implementation_status_comment', models.TextField(blank=True, verbose_name='Comment on implementation status')),
                ('purchase_price', models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True)),
                ('purchase_price_type', models.IntegerField(blank=True, choices=[(10, 'per ha'), (20, 'for specified area')], null=True)),
                ('purchase_price_area', models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True, verbose_name='Purchase price area')),
                ('purchase_price_comment', models.TextField(blank=True, verbose_name='Comment on purchase price')),
                ('annual_leasing_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True)),
                ('annual_leasing_fee_type', models.IntegerField(blank=True, choices=[(10, 'per ha'), (20, 'for specified area')], null=True)),
                ('annual_leasing_fee_area', models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True, verbose_name='Annual leasing fee area')),
                ('annual_leasing_fees_comment', models.TextField(blank=True, verbose_name='Comment on leasing fees')),
                ('contract_farming', models.BooleanField(default=False)),
                ('on_the_lease', models.BooleanField(default=False, verbose_name='On leased / purchased area')),
                ('on_the_lease_area', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='On leased / purchased area (in ha)')),
                ('on_the_lease_farmers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='On leased / purchased farmers')),
                ('on_the_lease_households', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='On leased / purchased households')),
                ('off_the_lease', models.BooleanField(default=False, verbose_name='Not on leased / purchased area (out-grower)')),
                ('off_the_lease_area', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Not on leased / purchased area (out-grower, in ha)')),
                ('off_the_lease_farmers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Not on leased / purchased farmers (out-grower)')),
                ('off_the_lease_households', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Not on leased / purchased households (out-grower)')),
                ('contract_farming_comment', models.TextField(blank=True, verbose_name='Comment on contract farming')),
                ('total_jobs_created', models.BooleanField(default=False, verbose_name='Jobs created (total)')),
                ('total_jobs_planned', models.IntegerField(blank=True, help_text='jobs', null=True, verbose_name='Planned number of jobs (total)')),
                ('total_jobs_planned_employees', models.IntegerField(blank=True, help_text='employees', null=True, verbose_name='Planned employees (total)')),
                ('total_jobs_planned_daily_workers', models.IntegerField(blank=True, help_text='workers', null=True, verbose_name='Planned daily/seasonal workers (total)')),
                ('total_jobs_current', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='jobs', null=True, verbose_name='Current number of jobs (total)')),
                ('total_jobs_current_employees', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='employees', null=True, verbose_name='Current number of employees (total)')),
                ('total_jobs_current_daily_workers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='workers', null=True, verbose_name='Current number of daily/seasonal workers (total)')),
                ('total_jobs_created_comment', models.TextField(blank=True, verbose_name='Comment on jobs created (total)')),
                ('foreign_jobs_created', models.BooleanField(default=False, verbose_name='Jobs created (foreign)')),
                ('foreign_jobs_planned', models.IntegerField(blank=True, help_text='jobs', null=True, verbose_name='Planned number of jobs (foreign)')),
                ('foreign_jobs_planned_employees', models.IntegerField(blank=True, help_text='employees', null=True, verbose_name='Planned employees (foreign)')),
                ('foreign_jobs_planned_daily_workers', models.IntegerField(blank=True, help_text='workers', null=True, verbose_name='Planned daily/seasonal workers (foreign)')),
                ('foreign_jobs_current', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='jobs', null=True, verbose_name='Current number of jobs (foreign)')),
                ('foreign_jobs_current_employees', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='employees', null=True, verbose_name='Current number of employees (foreign)')),
                ('foreign_jobs_current_daily_workers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='workers', null=True, verbose_name='Current number of daily/seasonal workers (foreign)')),
                ('foreign_jobs_created_comment', models.TextField(blank=True, verbose_name='Comment on jobs created (foreign)')),
                ('domestic_jobs_created', models.BooleanField(default=False, verbose_name='Jobs created (domestic)')),
                ('domestic_jobs_planned', models.IntegerField(blank=True, help_text='jobs', null=True, verbose_name='Planned number of jobs (domestic)')),
                ('domestic_jobs_planned_employees', models.IntegerField(blank=True, help_text='employees', null=True, verbose_name='Planned employees (domestic)')),
                ('domestic_jobs_planned_daily_workers', models.IntegerField(blank=True, help_text='workers', null=True, verbose_name='Planned daily/seasonal workers (domestic)')),
                ('domestic_jobs_current', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='jobs', null=True, verbose_name='Current number of jobs (domestic)')),
                ('domestic_jobs_current_employees', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='employees', null=True, verbose_name='Current number of employees (domestic)')),
                ('domestic_jobs_current_daily_workers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='workers', null=True, verbose_name='Current number of daily/seasonal workers (domestic)')),
                ('domestic_jobs_created_comment', models.TextField(blank=True, verbose_name='Comment on jobs created (domestic)')),
                ('involved_actors', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Actors involved in the negotiation / admission process')),
                ('project_name', models.CharField(blank=True, max_length=255)),
                ('investment_chain_comment', models.TextField(blank=True, verbose_name='Comment on investment chain')),
                ('name_of_community', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255, verbose_name='Name of community'), blank=True, null=True, size=None)),
                ('name_of_indigenous_people', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255, verbose_name='Name of indigenous people'), blank=True, null=True, size=None)),
                ('people_affected_comment', models.TextField(blank=True, verbose_name='Comment on communities / indigenous peoples affected')),
                ('recognition_status', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(10, 'Indigenous Peoples traditional or customary rights recognized by government'), (20, 'Indigenous Peoples traditional or customary rights not recognized by government'), (30, 'Community traditional or customary rights recognized by government'), (40, 'Community traditional or customary rights not recognized by government')], verbose_name='Name of community'), blank=True, null=True, size=None)),
                ('recognition_status_comment', models.TextField(blank=True, verbose_name='Comment on recognitions status of community land tenure')),
                ('community_consultation', models.IntegerField(blank=True, choices=[(10, 'Not consulted'), (20, 'Limited consultation'), (30, 'Free, Prior and Informed Consent (FPIC)'), (40, 'Certified Free, Prior and Informed Consent (FPIC)'), (50, 'Other')], null=True, verbose_name='Community consultation')),
                ('community_consultation_comment', models.TextField(blank=True, verbose_name='Comment on consultation of local community')),
                ('community_reaction', models.IntegerField(blank=True, choices=[(10, 'Consent'), (20, 'Mixed reaction'), (30, 'Rejection')], null=True, verbose_name='Community reaction')),
                ('community_reaction_comment', models.TextField(blank=True, verbose_name='Comment on community reaction')),
                ('land_conflicts', models.NullBooleanField(verbose_name='Presence of land conflicts')),
                ('land_conflicts_comment', models.TextField(blank=True, verbose_name='Comment on presence of land conflicts')),
                ('displacement_of_people', models.NullBooleanField(verbose_name='Displacement of people')),
                ('displaced_people', models.IntegerField(blank=True, null=True, verbose_name='Number of people actually displaced')),
                ('displaced_households', models.IntegerField(blank=True, null=True, verbose_name='Number of households actually displaced')),
                ('displaced_people_from_community_land', models.IntegerField(blank=True, null=True, verbose_name='Number of people displaced out of their community land')),
                ('displaced_people_within_community_land', models.IntegerField(blank=True, null=True, verbose_name='Number of people displaced staying on community land')),
                ('displaced_households_from_fields', models.IntegerField(blank=True, null=True, verbose_name='Number of households displaced "only" from their agricultural fields')),
                ('displaced_people_on_completion', models.IntegerField(blank=True, null=True, verbose_name='Number of people facing displacement once project is fully implemented')),
                ('displacement_of_people_comment', models.TextField(blank=True, verbose_name='Comment on presence of land conflicts')),
                ('negative_impacts', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(10, 'Environmental degradation'), (20, 'Socio-economic'), (30, 'Cultural loss'), (40, 'Eviction'), (50, 'Displacement'), (60, 'Violence'), (70, 'Other')], verbose_name='Negative impacts for local communities'), blank=True, null=True, size=None)),
                ('negative_impacts_comment', models.TextField(blank=True, verbose_name='Comment on negative impacts for local communities')),
                ('promised_compensation', models.TextField(blank=True, verbose_name='Promised compensation (e.g. for damages or resettlements)')),
                ('received_compensation', models.TextField(blank=True, verbose_name='Received compensation (e.g. for damages or resettlements)')),
                ('promised_benefits', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(10, 'Health'), (20, 'Education'), (30, 'Productive infrastructure (e.g. irrigation, tractors, machinery...)'), (40, 'Roads'), (50, 'Capacity Building'), (60, 'Financial Support'), (70, 'Community shares in the investment project'), (80, 'Other')], verbose_name='Promised benefits for local communities'), blank=True, null=True, size=None)),
                ('promised_benefits_comment', models.TextField(blank=True, verbose_name='Comment on promised benefits for local communities')),
                ('materialized_benefits', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(10, 'Health'), (20, 'Education'), (30, 'Productive infrastructure (e.g. irrigation, tractors, machinery...)'), (40, 'Roads'), (50, 'Capacity Building'), (60, 'Financial Support'), (70, 'Community shares in the investment project'), (80, 'Other')], verbose_name='Promised benefits for local communities'), blank=True, null=True, size=None)),
                ('materialized_benefits_comment', models.TextField(blank=True, verbose_name='Comment on promised benefits for local communities')),
                ('presence_of_organizations', models.TextField(blank=True, verbose_name='Presence of organizations and actions taken (e.g. farmer organizations, NGOs, etc.)')),
                ('former_land_owner', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(10, 'State'), (20, 'Private (smallholders)'), (30, 'Private (large-scale farm)'), (40, 'Community'), (50, 'Indigenous people'), (60, 'Other')], verbose_name='Former land owner'), blank=True, null=True, size=None)),
                ('former_land_owner_comment', models.TextField(blank=True, verbose_name='Comment on former land owner')),
                ('former_land_use', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(10, 'Commercial (large-scale) agriculture'), (20, 'Smallholder agriculture'), (30, 'Shifting cultivation'), (40, 'Pastoralism'), (50, 'Hunting/Gathering'), (60, 'Forestry'), (70, 'Conservation'), (80, 'Other')], verbose_name='Former land use'), blank=True, null=True, size=None)),
                ('former_land_use_comment', models.TextField(blank=True, verbose_name='Comment on former land use')),
                ('former_land_cover', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(10, 'Cropland'), (20, 'Forest land'), (30, 'Pasture'), (40, 'Shrub land/Grassland (Rangeland)'), (50, 'Marginal land'), (60, 'Wetland'), (70, 'Other land (e.g. developed land – specify in comment field)')], verbose_name='Former land cover'), blank=True, null=True, size=None)),
                ('former_land_cover_comment', models.TextField(blank=True, verbose_name='Comment on former land cover')),
                ('crops', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Crops area')),
                ('crops_yield', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='tons', null=True, verbose_name='Crops yield')),
                ('crops_export', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='%', null=True, verbose_name='Crops export')),
                ('crops_comment', models.TextField(blank=True)),
                ('animals', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Livestock area')),
                ('animals_yield', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='tons', null=True, verbose_name='Livestock yield')),
                ('animals_export', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='%', null=True, verbose_name='Livestock export')),
                ('animals_comment', models.TextField(blank=True)),
                ('resources', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Resources area')),
                ('resources_yield', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='tons', null=True, verbose_name='Resources yield')),
                ('resources_export', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='%', null=True, verbose_name='Resources export')),
                ('resources_comment', models.TextField(blank=True)),
                ('contract_farming_crops', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Contract farming crops')),
                ('contract_farming_crops_comment', models.TextField(blank=True, verbose_name='Comment on contract farming crops')),
                ('contract_farming_animals', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Contract farming livestock')),
                ('contract_farming_animals_comment', models.TextField(blank=True, verbose_name='Comment on contract farming livestock')),
                ('has_domestic_use', models.BooleanField(default=False, verbose_name='Has domestic use')),
                ('domestic_use', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Ownership share')),
                ('has_export', models.BooleanField(default=False, verbose_name='Has export')),
                ('export_country1_ratio', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Country 1 ratio')),
                ('export_country2_ratio', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Country 2 ratio')),
                ('export_country3_ratio', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Country 3 ratio')),
                ('use_of_produce_comment', models.TextField(blank=True)),
                ('in_country_processing', models.NullBooleanField(verbose_name='In country processing of produce')),
                ('in_country_processing_comment', models.TextField(blank=True, verbose_name='Comment on in country processing of produce')),
                ('in_country_processing_facilities', models.TextField(blank=True, verbose_name='Processing facilities / production infrastructure of the project (e.g. oil mill, ethanol distillery, biomass power plant etc.)')),
                ('in_country_end_products', models.TextField(blank=True, verbose_name='In-country end products of the project')),
                ('water_extraction_envisaged', models.NullBooleanField(verbose_name='Water extraction envisaged')),
                ('water_extraction_envisaged_comment', models.TextField(blank=True, verbose_name='Comment on water extraction envisaged')),
                ('source_of_water_extraction', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(10, 'Groundwater'), (20, 'Surface water'), (21, 'River'), (22, 'Lake')], verbose_name='Source of water extraction'), blank=True, null=True, size=None)),
                ('source_of_water_extraction_comment', models.TextField(blank=True, verbose_name='Comment on source of water extraction')),
                ('how_much_do_investors_pay_comment', models.TextField(blank=True, verbose_name='Comment on how much do investors pay for water')),
                ('water_extraction_amount', models.IntegerField(blank=True, help_text='m3/year', null=True, verbose_name='Water extraction amount')),
                ('water_extraction_amount_comment', models.TextField(blank=True, verbose_name='Comment on how much water is extracted')),
                ('use_of_irrigation_infrastructure', models.NullBooleanField(verbose_name='Use of irrigation infrastructure')),
                ('use_of_irrigation_infrastructure_comment', models.TextField(blank=True, verbose_name='Comment on use of irrigation infrastructure')),
                ('water_footprint', models.TextField(blank=True, verbose_name='Water footprint of the investment project')),
                ('gender_related_information', models.TextField(blank=True, verbose_name='Gender-related information')),
                ('vggt_applied', models.IntegerField(blank=True, choices=[(1, 'Yes'), (2, 'Partially'), (3, 'No')], null=True, verbose_name='Application of Voluntary Guidelines on the Responsible Governance of Tenure (VGGT)')),
                ('vggt_applied_comment', models.TextField(blank=True, verbose_name='Comment on VGGT')),
                ('prai_applied', models.IntegerField(blank=True, choices=[(1, 'Yes'), (2, 'Partially'), (3, 'No')], null=True, verbose_name='Application of Principles for Responsible Agricultural Investments (PRAI)')),
                ('prai_applied_comment', models.TextField(blank=True, verbose_name='Comment on PRAI')),
                ('overall_comment', models.TextField(blank=True, verbose_name='Overall comment')),
                ('status', models.IntegerField(choices=[(1, 'Draft'), (2, 'Live'), (3, 'Live + Draft'), (4, 'Deleted'), (5, 'Rejected'), (6, 'To Delete?')], default=1)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('annual_leasing_fee_currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deal_annual_leasing_fee', to='greennewdeal.Currency')),
                ('export_country1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='greennewdeal.Country')),
                ('export_country2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='greennewdeal.Country')),
                ('export_country3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='greennewdeal.Country')),
            ],
            bases=(models.Model, apps.greennewdeal.models.mixins.ReversionSaveMixin, apps.greennewdeal.models.mixins.OldDealMixin),
        ),
        migrations.CreateModel(
            name='Investor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024, verbose_name='Name')),
                ('classification', models.IntegerField(blank=True, choices=[(10, 'Private company'), (20, 'Stock-exchange listed company'), (30, 'Individual entrepreneur'), (40, 'Investment fund'), (50, 'Semi state-owned company'), (60, 'State-/government (owned) company'), (70, 'Other (please specify in comment field)'), (110, 'Government'), (120, 'Government institution'), (130, 'Multilateral Development Bank (MDB)'), (140, 'Bilateral Development Bank / Development Finance Institution'), (150, 'Commercial Bank'), (160, 'Investment Bank'), (170, 'Investment Fund (all types incl. pension, hedge, mutual, private equity funds etc.)'), (180, 'Insurance firm'), (190, 'Private equity firm'), (200, 'Asset management firm'), (210, 'Non - Profit organization (e.g. Church, University etc.)')], null=True, verbose_name='Classification')),
                ('homepage', models.URLField(blank=True, verbose_name='Investor homepage')),
                ('opencorporates', models.URLField(blank=True, verbose_name='Opencorporates link')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('status', models.IntegerField(choices=[(1, 'Draft'), (2, 'Live'), (3, 'Live + Draft'), (4, 'Deleted'), (5, 'Rejected'), (6, 'To Delete?')], default=1)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='greennewdeal.Country', verbose_name='Country of registration/origin')),
            ],
            bases=(models.Model, apps.greennewdeal.models.mixins.ReversionSaveMixin),
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(verbose_name='Slug')),
                ('point_lat_min', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Latitude of northernmost point')),
                ('point_lon_min', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Longitude of westernmost point')),
                ('point_lat_max', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Latitude of southernmost point')),
                ('point_lon_max', models.DecimalField(blank=True, decimal_places=12, max_digits=18, null=True, verbose_name='Longitude of easternmost point')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=2000)),
                ('description', models.CharField(blank=True, max_length=2000)),
                ('point', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('facility_name', models.CharField(blank=True, max_length=2000)),
                ('level_of_accuracy', models.IntegerField(blank=True, choices=[(50, 'Country'), (40, 'Administrative region'), (30, 'Approximate location'), (20, 'Exact location'), (10, 'Coordinates')], null=True)),
                ('comment', models.TextField(blank=True)),
                ('contract_area', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('intended_area', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('production_area', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                ('old_group_id', models.IntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('deal', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='locations', to='greennewdeal.Deal')),
            ],
            bases=(models.Model, apps.greennewdeal.models.mixins.OldLocationMixin),
        ),
        migrations.CreateModel(
            name='InvestorVentureInvolvement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.IntegerField(choices=[(10, 'Parent company'), (20, 'Tertiary investor/lender')], verbose_name='Relation type')),
                ('investment_type', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(10, 'Shares/Equity'), (20, 'Debt financing')], verbose_name='Investment type'), blank=True, null=True, size=None)),
                ('percentage', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Ownership share')),
                ('loans_amount', models.FloatField(blank=True, null=True, verbose_name='Loan amount')),
                ('loans_date', models.CharField(blank=True, max_length=10, verbose_name='Loan date')),
                ('parent_relation', models.IntegerField(blank=True, choices=[(10, 'Subsidiary of parent company'), (20, 'Local branch of parent company'), (30, 'Joint venture of parent companies')], null=True, verbose_name='Parent relation')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('status', models.IntegerField(choices=[(1, 'Draft'), (2, 'Live'), (3, 'Live + Draft'), (4, 'Deleted'), (5, 'Rejected'), (6, 'To Delete?')], default=1)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('old_id', models.IntegerField(blank=True, null=True)),
                ('investor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='venture_involvements', to='greennewdeal.Investor', verbose_name='Investor')),
                ('loans_currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='greennewdeal.Currency', verbose_name='Loan currency')),
                ('venture', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='investors', to='greennewdeal.Investor', verbose_name='Venture Company')),
            ],
            options={
                'verbose_name': 'Investor Venture Involvement',
                'verbose_name_plural': 'Investor Venture Involvements',
                'ordering': ['-id'],
            },
            bases=(models.Model, apps.greennewdeal.models.mixins.ReversionSaveMixin),
        ),
        migrations.AddField(
            model_name='investor',
            name='involvements',
            field=models.ManyToManyField(through='greennewdeal.InvestorVentureInvolvement', to='greennewdeal.Investor'),
        ),
        migrations.AddField(
            model_name='deal',
            name='operating_company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deals', to='greennewdeal.Investor'),
        ),
        migrations.AddField(
            model_name='deal',
            name='purchase_price_currency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deal_purchase_price', to='greennewdeal.Currency'),
        ),
        migrations.AddField(
            model_name='deal',
            name='target_country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='greennewdeal.Country'),
        ),
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(blank=True, choices=[(10, 'Media report'), (20, 'Research Paper / Policy Report'), (30, 'Government sources'), (40, 'Company sources'), (50, 'Contract'), (60, 'Contract (contract farming agreement)'), (70, 'Personal information'), (80, 'Crowdsourcing'), (90, 'Other (Please specify in comment field)')], null=True)),
                ('url', models.URLField(blank=True, max_length=5000, null=True)),
                ('file', models.FileField(blank=True, help_text='Maximum file size: 10MB', max_length=5000, null=True, upload_to='uploads', verbose_name='File')),
                ('file_not_public', models.BooleanField(default=False, verbose_name='Keep PDF not public')),
                ('publication_title', models.CharField(blank=True, max_length=5000)),
                ('date', models.DateField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=500, verbose_name='Name')),
                ('company', models.CharField(blank=True, max_length=500, verbose_name='Company')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=500, verbose_name='Phone')),
                ('includes_in_country_verified_information', models.BooleanField(default=False, verbose_name='Includes in-country-verified information')),
                ('open_land_contracts_id', models.CharField(blank=True, max_length=500)),
                ('comment', models.TextField(blank=True, verbose_name='Comment on data source')),
                ('old_group_id', models.IntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('deal', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='datasources', to='greennewdeal.Deal')),
            ],
            bases=(models.Model, apps.greennewdeal.models.mixins.OldDataSourceMixin),
        ),
        migrations.AddField(
            model_name='country',
            name='fk_region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='greennewdeal.Region', verbose_name='Region'),
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, max_length=255, verbose_name='Contract number')),
                ('date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('agreement_duration', models.IntegerField(blank=True, null=True, verbose_name='Duration of the agreement (in years)')),
                ('comment', models.TextField(blank=True)),
                ('old_group_id', models.IntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('deal', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='contracts', to='greennewdeal.Deal')),
            ],
            bases=(models.Model, apps.greennewdeal.models.mixins.OldContractMixin),
        ),
    ]
