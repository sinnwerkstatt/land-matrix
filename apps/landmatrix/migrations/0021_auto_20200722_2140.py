# Generated by Django 2.2.14 on 2020-07-22 19:40

import apps.landmatrix.models.mixins
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('landmatrix', '0020_auto_20200603_1320'),
    ]

    operations = [
        migrations.CreateModel(
            name='Deal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intended_size', models.DecimalField(blank=True, decimal_places=2, help_text='ha', max_digits=12, null=True, verbose_name='Intended size (in ha)')),
                ('contract_size', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Size under contract (leased or purchased area, in ha)')),
                ('production_size', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Size in operation (production, in ha)')),
                ('land_area_comment', models.TextField(blank=True, verbose_name='Comment on land area')),
                ('intention_of_investment', django.contrib.postgres.fields.jsonb.JSONField(blank=True, choices=[('Agriculture', (('BIOFUELS', 'Biofuels'), ('FOOD_CROPS', 'Food crops'), ('FODDER', 'Fodder'), ('LIVESTOCK', 'Livestock'), ('NON_FOOD_AGRICULTURE', 'Non-food agricultural commodities'), ('AGRICULTURE_UNSPECIFIED', 'Agriculture unspecified'))), ('Forestry', (('TIMBER_PLANTATION', 'Timber plantation'), ('FOREST_LOGGING', 'Forest logging / management'), ('CARBON', 'For carbon sequestration/REDD'), ('FORESTRY_UNSPECIFIED', 'Forestry unspecified'))), ('Other', (('MINING', 'Mining'), ('OIL_GAS_EXTRACTION', 'Oil / Gas extraction'), ('TOURISM', 'Tourism'), ('INDUSTRY', 'Industry'), ('CONVERSATION', 'Conservation'), ('LAND_SPECULATION', 'Land speculation'), ('RENEWABLE_ENERGY', 'Renewable Energy'), ('OTHER', 'Other')))], null=True, verbose_name='Intention of investment')),
                ('intention_of_investment_comment', models.TextField(blank=True, verbose_name='Comment on intention of investment')),
                ('nature_of_deal', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100, verbose_name='Nature of the deal'), blank=True, choices=[('OUTRIGHT_PURCHASE', 'Outright Purchase'), ('LEASE', 'Lease'), ('CONCESSION', 'Concession'), ('EXPLOITATION_PERMIT', 'Exploitation permit / license / concession (for mineral resources)'), ('PURE_CONTRACT_FARMING', 'Pure contract farming')], null=True, size=None)),
                ('nature_of_deal_comment', models.TextField(blank=True, verbose_name='Comment on nature of the deal')),
                ('negotiation_status', django.contrib.postgres.fields.jsonb.JSONField(blank=True, choices=[('Intended', (('EXPRESSION_OF_INTEREST', 'Expression of interest'), ('UNDER_NEGOTIATION', 'Under negotiation'), ('MEMORANDUM_OF_UNDERSTANDING', 'Memorandum of understanding'))), ('Concluded', (('ORAL_AGREEMENT', 'Oral agreement'), ('CONTRACT_SIGNED', 'Contract signed'))), ('Failed', (('NEGOTIATIONS_FAILED', 'Negotiations failed'), ('CONTRACT_CANCELED', 'Contract canceled'))), ('CONTRACT_EXPIRED', 'Contract expired'), ('CHANGE_OF_OWNERSHIP', 'Change of ownership')], null=True, verbose_name='Negotiation status')),
                ('negotiation_status_comment', models.TextField(blank=True, verbose_name='Comment on negotiation status')),
                ('implementation_status', django.contrib.postgres.fields.jsonb.JSONField(blank=True, choices=[('PROJECT_NOT_STARTED', 'Project not started'), ('STARTUP_PHASE', 'Startup phase (no production)'), ('IN_OPERATION', 'In operation (production)'), ('PROJECT_ABANDONED', 'Project abandoned')], null=True, verbose_name='Implementation status')),
                ('implementation_status_comment', models.TextField(blank=True, verbose_name='Comment on implementation status')),
                ('purchase_price', models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True, verbose_name='Purchase price')),
                ('purchase_price_type', models.CharField(blank=True, choices=[('PER_HA', 'per ha'), ('PER_AREA', 'for specified area')], max_length=100, null=True, verbose_name='Purchase price area type')),
                ('purchase_price_area', models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True, verbose_name='Purchase price area')),
                ('purchase_price_comment', models.TextField(blank=True, verbose_name='Comment on purchase price')),
                ('annual_leasing_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True, verbose_name='Annual leasing fee')),
                ('annual_leasing_fee_type', models.CharField(blank=True, choices=[('PER_HA', 'per ha'), ('PER_AREA', 'for specified area')], max_length=100, null=True, verbose_name='Annual leasing fee area type')),
                ('annual_leasing_fee_area', models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True, verbose_name='Annual leasing fee area')),
                ('annual_leasing_fee_comment', models.TextField(blank=True, verbose_name='Comment on leasing fee')),
                ('contract_farming', models.BooleanField(default=False)),
                ('on_the_lease', models.BooleanField(default=False, verbose_name='On leased / purchased area')),
                ('on_the_lease_area', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='On leased / purchased area (in ha)')),
                ('on_the_lease_farmers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='farmers', null=True, verbose_name='On leased / purchased farmers')),
                ('on_the_lease_households', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='households', null=True, verbose_name='On leased / purchased households')),
                ('off_the_lease', models.BooleanField(default=False, verbose_name='Not on leased / purchased area (out-grower)')),
                ('off_the_lease_area', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Not on leased / purchased area (out-grower, in ha)')),
                ('off_the_lease_farmers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='farmers', null=True, verbose_name='Not on leased / purchased farmers (out-grower)')),
                ('off_the_lease_households', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='households', null=True, verbose_name='Not on leased / purchased households (out-grower)')),
                ('contract_farming_comment', models.TextField(blank=True, verbose_name='Comment on contract farming')),
                ('total_jobs_created', models.BooleanField(default=False, verbose_name='Jobs created (total)')),
                ('total_jobs_planned', models.IntegerField(blank=True, help_text='jobs', null=True, verbose_name='Planned number of jobs (total)')),
                ('total_jobs_planned_employees', models.IntegerField(blank=True, help_text='employees', null=True, verbose_name='Planned employees (total)')),
                ('total_jobs_planned_daily_workers', models.IntegerField(blank=True, help_text='workers', null=True, verbose_name='Planned daily/seasonal workers (total)')),
                ('total_jobs_current', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='jobs', null=True, verbose_name='Current number of jobs (total)')),
                ('total_jobs_current_employees', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='employees', null=True, verbose_name='Current number of employees (total)')),
                ('total_jobs_current_daily_workers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='workers', null=True, verbose_name='Current number of daily/seasonal workers (total)')),
                ('total_jobs_created_comment', models.TextField(blank=True, verbose_name='Comment on jobs created (total)')),
                ('foreign_jobs_created', models.BooleanField(default=False, verbose_name='Jobs created (foreign)')),
                ('foreign_jobs_planned', models.IntegerField(blank=True, help_text='jobs', null=True, verbose_name='Planned number of jobs (foreign)')),
                ('foreign_jobs_planned_employees', models.IntegerField(blank=True, help_text='employees', null=True, verbose_name='Planned employees (foreign)')),
                ('foreign_jobs_planned_daily_workers', models.IntegerField(blank=True, help_text='workers', null=True, verbose_name='Planned daily/seasonal workers (foreign)')),
                ('foreign_jobs_current', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='jobs', null=True, verbose_name='Current number of jobs (foreign)')),
                ('foreign_jobs_current_employees', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='employees', null=True, verbose_name='Current number of employees (foreign)')),
                ('foreign_jobs_current_daily_workers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='workers', null=True, verbose_name='Current number of daily/seasonal workers (foreign)')),
                ('foreign_jobs_created_comment', models.TextField(blank=True, verbose_name='Comment on jobs created (foreign)')),
                ('domestic_jobs_created', models.BooleanField(default=False, verbose_name='Jobs created (domestic)')),
                ('domestic_jobs_planned', models.IntegerField(blank=True, help_text='jobs', null=True, verbose_name='Planned number of jobs (domestic)')),
                ('domestic_jobs_planned_employees', models.IntegerField(blank=True, help_text='employees', null=True, verbose_name='Planned employees (domestic)')),
                ('domestic_jobs_planned_daily_workers', models.IntegerField(blank=True, help_text='workers', null=True, verbose_name='Planned daily/seasonal workers (domestic)')),
                ('domestic_jobs_current', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='jobs', null=True, verbose_name='Current number of jobs (domestic)')),
                ('domestic_jobs_current_employees', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='employees', null=True, verbose_name='Current number of employees (domestic)')),
                ('domestic_jobs_current_daily_workers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='workers', null=True, verbose_name='Current number of daily/seasonal workers (domestic)')),
                ('domestic_jobs_created_comment', models.TextField(blank=True, verbose_name='Comment on jobs created (domestic)')),
                ('involved_actors', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Actors involved in the negotiation / admission process')),
                ('project_name', models.CharField(blank=True, max_length=255, verbose_name='Name of investment project')),
                ('investment_chain_comment', models.TextField(blank=True, verbose_name='Comment on investment chain')),
                ('name_of_community', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255, verbose_name='Name of community'), blank=True, null=True, size=None)),
                ('name_of_indigenous_people', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255, verbose_name='Name of indigenous people'), blank=True, null=True, size=None)),
                ('people_affected_comment', models.TextField(blank=True, verbose_name='Comment on communities / indigenous peoples affected')),
                ('recognition_status', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100, verbose_name='Recognition status of community land tenure'), blank=True, choices=[('INDIGENOUS_RIGHTS_RECOGNIZED', 'Indigenous Peoples traditional or customary rights recognized by government'), ('INDIGENOUS_RIGHTS_NOT_RECOGNIZED', 'Indigenous Peoples traditional or customary rights not recognized by government'), ('COMMUNITY_RIGHTS_RECOGNIZED', 'Community traditional or customary rights recognized by government'), ('COMMUNITY_RIGHTS_NOT_RECOGNIZED', 'Community traditional or customary rights not recognized by government')], null=True, size=None)),
                ('recognition_status_comment', models.TextField(blank=True, verbose_name='Comment on recognition status of community land tenure')),
                ('community_consultation', models.CharField(blank=True, choices=[('NOT_CONSULTED', 'Not consulted'), ('LIMITED_CONSULTATION', 'Limited consultation'), ('FPIC', 'Free, Prior and Informed Consent (FPIC)'), ('OTHER', 'Other')], max_length=100, null=True, verbose_name='Community consultation')),
                ('community_consultation_comment', models.TextField(blank=True, verbose_name='Comment on consultation of local community')),
                ('community_reaction', models.CharField(blank=True, choices=[('CONSENT', 'Consent'), ('MIXED_REACTION', 'Mixed reaction'), ('REJECTION', 'Rejection')], max_length=100, null=True, verbose_name='Community reaction')),
                ('community_reaction_comment', models.TextField(blank=True, verbose_name='Comment on community reaction')),
                ('land_conflicts', models.NullBooleanField(verbose_name='Presence of land conflicts')),
                ('land_conflicts_comment', models.TextField(blank=True, verbose_name='Comment on presence of land conflicts')),
                ('displacement_of_people', models.NullBooleanField(verbose_name='Displacement of people')),
                ('displaced_people', models.IntegerField(blank=True, null=True, verbose_name='Number of people actually displaced')),
                ('displaced_households', models.IntegerField(blank=True, null=True, verbose_name='Number of households actually displaced')),
                ('displaced_people_from_community_land', models.IntegerField(blank=True, null=True, verbose_name='Number of people displaced out of their community land')),
                ('displaced_people_within_community_land', models.IntegerField(blank=True, null=True, verbose_name='Number of people displaced staying on community land')),
                ('displaced_households_from_fields', models.IntegerField(blank=True, null=True, verbose_name='Number of households displaced "only" from their agricultural fields')),
                ('displaced_people_on_completion', models.IntegerField(blank=True, null=True, verbose_name='Number of people facing displacement once project is fully implemented')),
                ('displacement_of_people_comment', models.TextField(blank=True, verbose_name='Comment on displacement of people')),
                ('negative_impacts', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100, verbose_name='Negative impacts for local communities'), blank=True, choices=[('ENVIRONMENTAL_DEGRADATION', 'Environmental degradation'), ('SOCIO_ECONOMIC', 'Socio-economic'), ('CULTURAL_LOSS', 'Cultural loss'), ('EVICTION', 'Eviction'), ('DISPLACEMENT', 'Displacement'), ('VIOLENCE', 'Violence'), ('OTHER', 'Other')], null=True, size=None)),
                ('negative_impacts_comment', models.TextField(blank=True, verbose_name='Comment on negative impacts for local communities')),
                ('promised_compensation', models.TextField(blank=True, verbose_name='Promised compensation (e.g. for damages or resettlements)')),
                ('received_compensation', models.TextField(blank=True, verbose_name='Received compensation (e.g. for damages or resettlements)')),
                ('promised_benefits', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100, verbose_name='Promised benefits for local communities'), blank=True, choices=[('HEALTH', 'Health'), ('EDUCATION', 'Education'), ('PRODUCTIVE_INFRASTRUCTURE', 'Productive infrastructure (e.g. irrigation, tractors, machinery...)'), ('ROADS', 'Roads'), ('CAPACITY_BUILDING', 'Capacity Building'), ('FINANCIAL_SUPPORT', 'Financial Support'), ('COMMUNITY_SHARES', 'Community shares in the investment project'), ('OTHER', 'Other')], null=True, size=None)),
                ('promised_benefits_comment', models.TextField(blank=True, verbose_name='Comment on promised benefits for local communities')),
                ('materialized_benefits', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100, verbose_name='Materialized benefits for local communities'), blank=True, choices=[('HEALTH', 'Health'), ('EDUCATION', 'Education'), ('PRODUCTIVE_INFRASTRUCTURE', 'Productive infrastructure (e.g. irrigation, tractors, machinery...)'), ('ROADS', 'Roads'), ('CAPACITY_BUILDING', 'Capacity Building'), ('FINANCIAL_SUPPORT', 'Financial Support'), ('COMMUNITY_SHARES', 'Community shares in the investment project'), ('OTHER', 'Other')], null=True, size=None)),
                ('materialized_benefits_comment', models.TextField(blank=True, verbose_name='Comment on materialized benefits for local communities')),
                ('presence_of_organizations', models.TextField(blank=True, verbose_name='Presence of organizations and actions taken (e.g. farmer organizations, NGOs, etc.)')),
                ('former_land_owner', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, choices=[('STATE', 'State'), ('PRIVATE_SMALLHOLDERS', 'Private (smallholders)'), ('PRIVATE_LARGE_SCALE', 'Private (large-scale farm)'), ('COMMUNITY', 'Community'), ('INDIGENOUS_PEOPLE', 'Indigenous people'), ('OTHER', 'Other')], null=True, size=None, verbose_name='Former land owner')),
                ('former_land_owner_comment', models.TextField(blank=True, verbose_name='Comment on former land owner')),
                ('former_land_use', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, choices=[('COMMERCIAL_AGRICULTURE', 'Commercial (large-scale) agriculture'), ('SMALLHOLDER_AGRICULTURE', 'Smallholder agriculture'), ('SHIFTING_CULTIVATION', 'Shifting cultivation'), ('PASTORALISM', 'Pastoralism'), ('HUNTING_GATHERING', 'Hunting/Gathering'), ('FORESTRY', 'Forestry'), ('CONSERVATION', 'Conservation'), ('OTHER', 'Other')], null=True, size=None, verbose_name='Former land use')),
                ('former_land_use_comment', models.TextField(blank=True, verbose_name='Comment on former land use')),
                ('former_land_cover', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, choices=[('CROPLAND', 'Cropland'), ('FOREST_LAND', 'Forest land'), ('PASTURE', 'Pasture'), ('RANGELAND', 'Shrub land/Grassland (Rangeland)'), ('MARGINAL_LAND', 'Marginal land'), ('WETLAND', 'Wetland'), ('OTHER_LAND', 'Other land (e.g. developed land – specify in comment field)')], null=True, size=None, verbose_name='Former land cover')),
                ('former_land_cover_comment', models.TextField(blank=True, verbose_name='Comment on former land cover')),
                ('crops', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Crops area/yield/export')),
                ('crops_comment', models.TextField(blank=True, verbose_name='Comment on crops')),
                ('animals', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Livestock area/yield/export')),
                ('animals_comment', models.TextField(blank=True, verbose_name='Comment on livestock')),
                ('resources', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Resources area/yield/export')),
                ('resources_comment', models.TextField(blank=True, verbose_name='Comment on resources')),
                ('contract_farming_crops', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Contract farming crops')),
                ('contract_farming_crops_comment', models.TextField(blank=True, verbose_name='Comment on contract farming crops')),
                ('contract_farming_animals', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='ha', null=True, verbose_name='Contract farming livestock')),
                ('contract_farming_animals_comment', models.TextField(blank=True, verbose_name='Comment on contract farming livestock')),
                ('has_domestic_use', models.BooleanField(default=False, verbose_name='Has domestic use')),
                ('domestic_use', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Domestic use')),
                ('has_export', models.BooleanField(default=False, verbose_name='Has export')),
                ('export', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Export')),
                ('export_country1_ratio', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Country 1 ratio')),
                ('export_country2_ratio', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Country 2 ratio')),
                ('export_country3_ratio', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Country 3 ratio')),
                ('use_of_produce_comment', models.TextField(blank=True, verbose_name='Comment on use of produce')),
                ('in_country_processing', models.NullBooleanField(verbose_name='In country processing of produce')),
                ('in_country_processing_comment', models.TextField(blank=True, verbose_name='Comment on in country processing of produce')),
                ('in_country_processing_facilities', models.TextField(blank=True, verbose_name='Processing facilities / production infrastructure of the project (e.g. oil mill, ethanol distillery, biomass power plant etc.)')),
                ('in_country_end_products', models.TextField(blank=True, verbose_name='In-country end products of the project')),
                ('water_extraction_envisaged', models.NullBooleanField(verbose_name='Water extraction envisaged')),
                ('water_extraction_envisaged_comment', models.TextField(blank=True, verbose_name='Comment on water extraction envisaged')),
                ('source_of_water_extraction', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, choices=[('GROUNDWATER', 'Groundwater'), ('SURFACE_WATER', 'Surface water'), ('RIVER', 'River'), ('LAKE', 'Lake')], null=True, size=None, verbose_name='Source of water extraction')),
                ('source_of_water_extraction_comment', models.TextField(blank=True, verbose_name='Comment on source of water extraction')),
                ('how_much_do_investors_pay_comment', models.TextField(blank=True, verbose_name='Comment on how much do investors pay for water')),
                ('water_extraction_amount', models.IntegerField(blank=True, help_text='m3/year', null=True, verbose_name='Water extraction amount')),
                ('water_extraction_amount_comment', models.TextField(blank=True, verbose_name='Comment on how much water is extracted')),
                ('use_of_irrigation_infrastructure', models.NullBooleanField(verbose_name='Use of irrigation infrastructure')),
                ('use_of_irrigation_infrastructure_comment', models.TextField(blank=True, verbose_name='Comment on use of irrigation infrastructure')),
                ('water_footprint', models.TextField(blank=True, verbose_name='Water footprint of the investment project')),
                ('gender_related_information', models.TextField(blank=True, verbose_name='Comment on gender-related info')),
                ('vggt_applied', models.CharField(blank=True, choices=[('YES', 'Yes'), ('PARTIALLY', 'Partially'), ('NO', 'No')], max_length=100, null=True, verbose_name='Application of Voluntary Guidelines on the Responsible Governance of Tenure (VGGT)')),
                ('vggt_applied_comment', models.TextField(blank=True, verbose_name='Comment on VGGT')),
                ('prai_applied', models.CharField(blank=True, choices=[('YES', 'Yes'), ('PARTIALLY', 'Partially'), ('NO', 'No')], max_length=100, null=True, verbose_name='Application of Principles for Responsible Agricultural Investments (PRAI)')),
                ('prai_applied_comment', models.TextField(blank=True, verbose_name='Comment on PRAI')),
                ('overall_comment', models.TextField(blank=True, verbose_name='Overall comment')),
                ('fully_updated', models.BooleanField(default=False)),
                ('confidential', models.BooleanField(default=False)),
                ('confidential_reason', models.CharField(blank=True, choices=[('TEMPORARY_REMOVAL', 'Temporary removal from PI after criticism'), ('RESEARCH_IN_PROGRESS', 'Research in progress'), ('LAND_OBSERVATORY_IMPORT', 'Land Observatory Import')], max_length=100, null=True)),
                ('confidential_comment', models.TextField(blank=True, verbose_name='Comment why this deal is private')),
                ('deal_size', models.IntegerField(blank=True, null=True)),
                ('current_negotiation_status', models.CharField(blank=True, choices=[('Intended', (('EXPRESSION_OF_INTEREST', 'Expression of interest'), ('UNDER_NEGOTIATION', 'Under negotiation'), ('MEMORANDUM_OF_UNDERSTANDING', 'Memorandum of understanding'))), ('Concluded', (('ORAL_AGREEMENT', 'Oral agreement'), ('CONTRACT_SIGNED', 'Contract signed'))), ('Failed', (('NEGOTIATIONS_FAILED', 'Negotiations failed'), ('CONTRACT_CANCELED', 'Contract canceled'))), ('CONTRACT_EXPIRED', 'Contract expired'), ('CHANGE_OF_OWNERSHIP', 'Change of ownership')], max_length=100, null=True)),
                ('current_implementation_status', models.CharField(blank=True, choices=[('PROJECT_NOT_STARTED', 'Project not started'), ('STARTUP_PHASE', 'Startup phase (no production)'), ('IN_OPERATION', 'In operation (production)'), ('PROJECT_ABANDONED', 'Project abandoned')], max_length=100, null=True)),
                ('current_contract_size', models.FloatField(blank=True, null=True)),
                ('current_production_size', models.FloatField(blank=True, null=True)),
                ('geojson', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('status', models.IntegerField(choices=[(1, 'Draft'), (2, 'Live'), (3, 'Updated'), (4, 'Deleted'), (5, 'Rejected'), (6, 'To Delete?')], default=1)),
                ('draft_status', models.IntegerField(blank=True, choices=[(1, 'Draft'), (2, 'Review'), (3, 'Activation')], null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified_at', models.DateTimeField()),
                ('fully_updated_at', models.DateTimeField(null=True)),
                ('annual_leasing_fee_currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deal_annual_leasing_fee', to='landmatrix.Currency', verbose_name='Annual leasing fee currency')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='landmatrix.Country', verbose_name='Target Country')),
                ('export_country1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='landmatrix.Country', verbose_name='Country 1')),
                ('export_country2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='landmatrix.Country', verbose_name='Country 2')),
                ('export_country3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='landmatrix.Country', verbose_name='Country 3')),
            ],
            bases=(models.Model, apps.landmatrix.models.mixins.UnderscoreDisplayParseMixin, apps.landmatrix.models.mixins.ReversionSaveMixin, apps.landmatrix.models.mixins.OldDealMixin),
        ),
        migrations.CreateModel(
            name='Investor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024, verbose_name='Name')),
                ('classification', models.CharField(blank=True, choices=[('GOVERNMENT', 'Government'), ('GOVERNMENT_INSTITUTION', 'Government institution'), ('STATE_OWNED_COMPANY', 'State-/government (owned) company'), ('SEMI_STATE_OWNED_COMPANY', 'Semi state-owned company'), ('ASSET_MANAGEMENT_FIRM', 'Asset management firm'), ('BILATERAL_DEVELOPMENT_BANK', 'Bilateral Development Bank / Development Finance Institution'), ('STOCK_EXCHANGE_LISTED_COMPANY', 'Stock-exchange listed company'), ('COMMERCIAL_BANK', 'Commercial Bank'), ('INSURANCE_FIRM', 'Insurance firm'), ('INVESTMENT_BANK', 'Investment Bank'), ('INVESTMENT_FUND', 'Investment fund'), ('MULTILATERAL_DEVELOPMENT_BANK', 'Multilateral Development Bank (MDB)'), ('PRIVATE_COMPANY', 'Private company'), ('PRIVATE_EQUITY_FIRM', 'Private equity firm'), ('INDIVIDUAL_ENTREPRENEUR', 'Individual entrepreneur'), ('NON_PROFIT', 'Non - Profit organization (e.g. Church, University etc.)'), ('OTHER', 'Other (please specify in comment field)')], max_length=100, null=True, verbose_name='Classification')),
                ('homepage', models.URLField(blank=True, verbose_name='Investor homepage')),
                ('opencorporates', models.URLField(blank=True, verbose_name='Opencorporates link')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('status', models.IntegerField(choices=[(1, 'Draft'), (2, 'Live'), (3, 'Updated'), (4, 'Deleted'), (5, 'Rejected'), (6, 'To Delete?')], default=1)),
                ('draft_status', models.IntegerField(blank=True, choices=[(1, 'Draft'), (2, 'Review'), (3, 'Activation')], null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified_at', models.DateTimeField()),
                ('old_id', models.IntegerField(blank=True, null=True)),
                ('is_actually_unknown', models.BooleanField(default=False)),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='landmatrix.Country', verbose_name='Country of registration/origin')),
            ],
            bases=(models.Model, apps.landmatrix.models.mixins.UnderscoreDisplayParseMixin, apps.landmatrix.models.mixins.ReversionSaveMixin),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=2000)),
                ('description', models.CharField(blank=True, max_length=2000)),
                ('point', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('facility_name', models.CharField(blank=True, max_length=2000)),
                ('level_of_accuracy', models.CharField(blank=True, choices=[('COUNTRY', 'Country'), ('ADMINISTRATIVE_REGION', 'Administrative region'), ('APPROXIMATE_LOCATION', 'Approximate location'), ('EXACT_LOCATION', 'Exact location'), ('COORDINATES', 'Coordinates')], max_length=100, null=True, verbose_name='Spatial accuracy level')),
                ('comment', models.TextField(blank=True)),
                ('areas', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('old_group_id', models.IntegerField(blank=True, null=True)),
                ('deal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='landmatrix.Deal')),
            ],
            bases=(models.Model, apps.landmatrix.models.mixins.UnderscoreDisplayParseMixin, apps.landmatrix.models.mixins.OldLocationMixin),
        ),
        migrations.CreateModel(
            name='InvestorVentureInvolvement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('PARENT', 'Parent company'), ('LENDER', 'Tertiary investor/lender')], max_length=100, verbose_name='Relation type')),
                ('investment_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('EQUITY', 'Shares/Equity'), ('DEBT_FINANCING', 'Debt financing')], max_length=100, verbose_name='Investment type'), blank=True, null=True, size=None)),
                ('percentage', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Ownership share')),
                ('loans_amount', models.FloatField(blank=True, null=True, verbose_name='Loan amount')),
                ('loans_date', models.CharField(blank=True, max_length=20, verbose_name='Loan date')),
                ('parent_relation', models.CharField(blank=True, choices=[('SUBSIDIARY', 'Subsidiary of parent company'), ('LOCAL_BRANCH', 'Local branch of parent company'), ('JOINT_VENTURE', 'Joint venture of parent companies')], max_length=100, null=True, verbose_name='Parent relation')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('status', models.IntegerField(choices=[(1, 'Draft'), (2, 'Live'), (3, 'Updated'), (4, 'Deleted'), (5, 'Rejected'), (6, 'To Delete?')], default=1)),
                ('draft_status', models.IntegerField(blank=True, choices=[(1, 'Draft'), (2, 'Review'), (3, 'Activation')], null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified_at', models.DateTimeField()),
                ('old_id', models.IntegerField(blank=True, null=True)),
                ('investor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ventures', to='landmatrix.Investor', verbose_name='Investor')),
                ('loans_currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='landmatrix.Currency', verbose_name='Loan currency')),
                ('venture', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='investors', to='landmatrix.Investor', verbose_name='Venture Company')),
            ],
            options={
                'verbose_name': 'Investor Venture Involvement',
                'verbose_name_plural': 'Investor Venture Involvements',
                'ordering': ['-id'],
            },
            bases=(models.Model, apps.landmatrix.models.mixins.UnderscoreDisplayParseMixin, apps.landmatrix.models.mixins.ReversionSaveMixin),
        ),
        migrations.AddField(
            model_name='investor',
            name='involvements',
            field=models.ManyToManyField(through='landmatrix.InvestorVentureInvolvement', to='landmatrix.Investor'),
        ),
        migrations.AddField(
            model_name='deal',
            name='operating_company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deals', to='landmatrix.Investor'),
        ),
        migrations.AddField(
            model_name='deal',
            name='purchase_price_currency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deal_purchase_price', to='landmatrix.Currency', verbose_name='Purchase price currency'),
        ),
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('MEDIA_REPORT', 'Media report'), ('RESEARCH_PAPER_OR_POLICY_REPORT', 'Research Paper / Policy Report'), ('GOVERNMENT_SOURCES', 'Government sources'), ('COMPANY_SOURCES', 'Company sources'), ('CONTRACT', 'Contract'), ('CONTRACT_FARMING_AGREEMENT', 'Contract (contract farming agreement)'), ('PERSONAL_INFORMATION', 'Personal information'), ('CROWDSOURCING', 'Crowdsourcing'), ('OTHER', 'Other (Please specify in comment field)')], max_length=100, null=True)),
                ('url', models.URLField(blank=True, max_length=5000, null=True)),
                ('file', models.FileField(blank=True, help_text='Maximum file size: 10MB', max_length=5000, null=True, upload_to='uploads', verbose_name='File')),
                ('file_not_public', models.BooleanField(default=False, verbose_name='Keep PDF not public')),
                ('publication_title', models.CharField(blank=True, max_length=5000)),
                ('date', models.DateField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=500, verbose_name='Name')),
                ('company', models.CharField(blank=True, max_length=500, verbose_name='Company')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=500, verbose_name='Phone')),
                ('includes_in_country_verified_information', models.BooleanField(default=False, verbose_name='Includes in-country-verified information')),
                ('open_land_contracts_id', models.CharField(blank=True, max_length=500)),
                ('comment', models.TextField(blank=True, verbose_name='Comment on data source')),
                ('old_group_id', models.IntegerField(blank=True, null=True)),
                ('deal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='datasources', to='landmatrix.Deal')),
            ],
            bases=(models.Model, apps.landmatrix.models.mixins.UnderscoreDisplayParseMixin, apps.landmatrix.models.mixins.OldDataSourceMixin),
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, max_length=255, verbose_name='Contract number')),
                ('date', models.DateField(blank=True, null=True)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('agreement_duration', models.IntegerField(blank=True, null=True, verbose_name='Duration of the agreement (in years)')),
                ('comment', models.TextField(blank=True)),
                ('old_group_id', models.IntegerField(blank=True, null=True)),
                ('deal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contracts', to='landmatrix.Deal')),
            ],
            bases=(models.Model, apps.landmatrix.models.mixins.UnderscoreDisplayParseMixin, apps.landmatrix.models.mixins.OldContractMixin),
        ),
    ]
