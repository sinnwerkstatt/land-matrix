type Query {
    me: User
    user(id: Int!): User
    users(sort: String = "id"): [User]

    deal(id: Int!): Deal!
    deals(sort: String = "id"): [Deal]

    investor(id: Int!): Investor!
    investors(sort: String = "id"): [Investor]
}

type User {
    id: Int
    username: String
    first_name: String
    last_name: String
    full_name: String
    email: String
    is_active: Boolean
    is_authenticated: Boolean
    is_staff: Boolean
    is_impersonate: Boolean
    date_joined: DateTime
}


type Investor {
    id: Int
    name: String
    country: Country
    classification_display: String
}

type Deal {
    id: Int
    target_country: Country
    top_investors: [Investor]
    intention_of_investment: [DateValuePair]
    negotiation_status: [DateValuePair]
    implementation_status: [DateValuePair]
    deal_size: Float
    intended_size: Float
    contract_size: [DateValuePair]
    production_size: [DateValuePair]
    geojson: GeoJSON
    timestamp: DateTime
}

type Country {
    id: Int
    name: String
}

type DateValuePair {
    date: String
    value: String
}

"GeoJSON combined from all the deals' locations"
scalar GeoJSON

scalar DateTime



type Mutation {
    login(username: String!, password: String!): LoginPayload
    logout: Boolean!
}

type LoginPayload {
    status: Boolean!
    error: String
    user: User
}
